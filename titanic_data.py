# -*- coding: utf-8 -*-
"""titanic_data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1utg2KU8JQbJym1uslfKHBnufATEpT0mM
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import statistics as st

df1 = pd.read_csv("tested.csv", index_col = False)
df1

df1.shape

df1.head(4)

df1.tail()

#Lets describe the data
df_describe = df1.describe()
df_describe

age_array = np.array(df1['Age'])

df1 = df1.dropna(subset = ["Age"])

df1.shape

#Lets handle fare
fare_array = np.array(df1['Fare'])
df1['Fare'] = df1['Fare'].fillna(13.0)

#Correlations
df1['Sex'] = df1['Sex'].replace(['female','male'],[0,1])
age_fare_corr = df1[['Age', 'Fare']].corr()

age_survive_corr = df1[['Age', 'Survived']].corr()

gender_survuve_corr = df1[['Sex', 'Survived']].corr()

class_survival_corr = df1[['Pclass', 'Survived']].corr()

age_fare_corr = df1[['Age', 'Fare']].corr()

class_fare_corr = df1[['Pclass', 'Fare']].corr()

sibsp_fare_corr = df1[['SibSp', 'Fare']].corr()

sibsp_survived_corr = df1[['SibSp', 'Survived']].corr()

Parch_survived_corr = df1[['Parch', 'Survived']].corr()

print(age_fare_corr)
print(age_survive_corr)
print(gender_survuve_corr)
print(class_survival_corr)
print(age_fare_corr)
print(class_fare_corr)
print(sibsp_fare_corr)
print(sibsp_survived_corr)
print(Parch_survived_corr)

#SURVIVAL ACCORDING TO GENDER
df1['Sex'] = df1['Sex'].replace([0,1],['female','male'])
sns.catplot(x = "Sex", hue = "Survived", kind = "count", data = df1)

#Class

sns.countplot(x = "Pclass", data = df1)

#Survival according to class

sns.catplot(x = "Pclass", hue = "Survived", kind = "count", data = df1)

#Fare value
df1['Fare range'] = pd.qcut(df1['Fare'], 4)
sns.barplot(x = df1['Fare range'] , y = df1['Survived'])

#Family size

df1['Family_size'] = 0
df1['Family_size'] = df1['Parch'] + df1['SibSp']

df1['Alone'] = 0
df1.loc[df1.Family_size==0, 'Alone'] = 1

sns.lineplot(x = 'Family_size', y = 'Survived', data = df1)

final_df = df1.drop(columns = ['PassengerId', 'Name', 'Ticket', 'Ticket', 'Fare range', 'Family_size', 'Alone', 'Cabin', 'Embarked'])

from sklearn.model_selection import train_test_split

final_df['Sex'] = final_df['Sex'].replace(['female','male'],[0,1])
final_df

x = final_df[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare']]
y = final_df['Survived']

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 7)

x_train

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

model = LogisticRegression()

model.fit(x_train, y_train)

training_results = model.predict(x_train)

train_accuracy = accuracy_score(y_train, training_results)
train_accuracy

test_results = model.predict(x_test)
test_accuracy = accuracy_score(y_test, test_results)

test_accuracy